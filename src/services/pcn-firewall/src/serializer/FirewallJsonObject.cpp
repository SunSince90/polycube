/**
* firewall API
* firewall API generated from firewall.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "FirewallJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

FirewallJsonObject::FirewallJsonObject() {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_ingressPortIsSet = false;
  m_egressPortIsSet = false;
  m_conntrackIsSet = false;
  m_acceptEstablishedIsSet = false;
  m_interactive = true;
  m_interactiveIsSet = true;
  m_sessionTableIsSet = false;
  m_chainIsSet = false;
}

FirewallJsonObject::FirewallJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_ingressPortIsSet = false;
  m_egressPortIsSet = false;
  m_conntrackIsSet = false;
  m_acceptEstablishedIsSet = false;
  m_interactiveIsSet = false;
  m_sessionTableIsSet = false;
  m_chainIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("ingress-port")) {
    setIngressPort(val.at("ingress-port").get<std::string>());
  }

  if (val.count("egress-port")) {
    setEgressPort(val.at("egress-port").get<std::string>());
  }

  if (val.count("conntrack")) {
    setConntrack(string_to_FirewallConntrackEnum(val.at("conntrack").get<std::string>()));
  }

  if (val.count("accept-established")) {
    setAcceptEstablished(string_to_FirewallAcceptEstablishedEnum(val.at("accept-established").get<std::string>()));
  }

  if (val.count("interactive")) {
    setInteractive(val.at("interactive").get<bool>());
  }

  if (val.count("session-table")) {
    for (auto& item : val["session-table"]) {
      SessionTableJsonObject newItem{ item };
      m_sessionTable.push_back(newItem);
    }

    m_sessionTableIsSet = true;
  }

  if (val.count("chain")) {
    for (auto& item : val["chain"]) {
      ChainJsonObject newItem{ item };
      m_chain.push_back(newItem);
    }

    m_chainIsSet = true;
  }
}

nlohmann::json FirewallJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  if (m_ingressPortIsSet) {
    val["ingress-port"] = m_ingressPort;
  }

  if (m_egressPortIsSet) {
    val["egress-port"] = m_egressPort;
  }

  if (m_conntrackIsSet) {
    val["conntrack"] = FirewallConntrackEnum_to_string(m_conntrack);
  }

  if (m_acceptEstablishedIsSet) {
    val["accept-established"] = FirewallAcceptEstablishedEnum_to_string(m_acceptEstablished);
  }

  if (m_interactiveIsSet) {
    val["interactive"] = m_interactive;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_sessionTable) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["session-table"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_chain) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["chain"] = jsonArray;
    }
  }

  return val;
}

std::string FirewallJsonObject::getName() const {
  return m_name;
}

void FirewallJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool FirewallJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<PortsJsonObject>& FirewallJsonObject::getPorts() const{
  return m_ports;
}

void FirewallJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool FirewallJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void FirewallJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

std::string FirewallJsonObject::getIngressPort() const {
  return m_ingressPort;
}

void FirewallJsonObject::setIngressPort(std::string value) {
  m_ingressPort = value;
  m_ingressPortIsSet = true;
}

bool FirewallJsonObject::ingressPortIsSet() const {
  return m_ingressPortIsSet;
}

void FirewallJsonObject::unsetIngressPort() {
  m_ingressPortIsSet = false;
}

std::string FirewallJsonObject::getEgressPort() const {
  return m_egressPort;
}

void FirewallJsonObject::setEgressPort(std::string value) {
  m_egressPort = value;
  m_egressPortIsSet = true;
}

bool FirewallJsonObject::egressPortIsSet() const {
  return m_egressPortIsSet;
}

void FirewallJsonObject::unsetEgressPort() {
  m_egressPortIsSet = false;
}

FirewallConntrackEnum FirewallJsonObject::getConntrack() const {
  return m_conntrack;
}

void FirewallJsonObject::setConntrack(FirewallConntrackEnum value) {
  m_conntrack = value;
  m_conntrackIsSet = true;
}

bool FirewallJsonObject::conntrackIsSet() const {
  return m_conntrackIsSet;
}

void FirewallJsonObject::unsetConntrack() {
  m_conntrackIsSet = false;
}

std::string FirewallJsonObject::FirewallConntrackEnum_to_string(const FirewallConntrackEnum &value){
  switch(value) {
    case FirewallConntrackEnum::ON:
      return std::string("on");
    case FirewallConntrackEnum::OFF:
      return std::string("off");
    default:
      throw std::runtime_error("Bad Firewall conntrack");
  }
}

FirewallConntrackEnum FirewallJsonObject::string_to_FirewallConntrackEnum(const std::string &str){
  if (JsonObjectBase::iequals("on", str))
    return FirewallConntrackEnum::ON;
  if (JsonObjectBase::iequals("off", str))
    return FirewallConntrackEnum::OFF;
  throw std::runtime_error("Firewall conntrack is invalid");
}
FirewallAcceptEstablishedEnum FirewallJsonObject::getAcceptEstablished() const {
  return m_acceptEstablished;
}

void FirewallJsonObject::setAcceptEstablished(FirewallAcceptEstablishedEnum value) {
  m_acceptEstablished = value;
  m_acceptEstablishedIsSet = true;
}

bool FirewallJsonObject::acceptEstablishedIsSet() const {
  return m_acceptEstablishedIsSet;
}

void FirewallJsonObject::unsetAcceptEstablished() {
  m_acceptEstablishedIsSet = false;
}

std::string FirewallJsonObject::FirewallAcceptEstablishedEnum_to_string(const FirewallAcceptEstablishedEnum &value){
  switch(value) {
    case FirewallAcceptEstablishedEnum::ON:
      return std::string("on");
    case FirewallAcceptEstablishedEnum::OFF:
      return std::string("off");
    default:
      throw std::runtime_error("Bad Firewall acceptEstablished");
  }
}

FirewallAcceptEstablishedEnum FirewallJsonObject::string_to_FirewallAcceptEstablishedEnum(const std::string &str){
  if (JsonObjectBase::iequals("on", str))
    return FirewallAcceptEstablishedEnum::ON;
  if (JsonObjectBase::iequals("off", str))
    return FirewallAcceptEstablishedEnum::OFF;
  throw std::runtime_error("Firewall acceptEstablished is invalid");
}
bool FirewallJsonObject::getInteractive() const {
  return m_interactive;
}

void FirewallJsonObject::setInteractive(bool value) {
  m_interactive = value;
  m_interactiveIsSet = true;
}

bool FirewallJsonObject::interactiveIsSet() const {
  return m_interactiveIsSet;
}

void FirewallJsonObject::unsetInteractive() {
  m_interactiveIsSet = false;
}

const std::vector<SessionTableJsonObject>& FirewallJsonObject::getSessionTable() const{
  return m_sessionTable;
}

void FirewallJsonObject::addSessionTable(SessionTableJsonObject value) {
  m_sessionTable.push_back(value);
  m_sessionTableIsSet = true;
}


bool FirewallJsonObject::sessionTableIsSet() const {
  return m_sessionTableIsSet;
}

void FirewallJsonObject::unsetSessionTable() {
  m_sessionTableIsSet = false;
}

const std::vector<ChainJsonObject>& FirewallJsonObject::getChain() const{
  return m_chain;
}

void FirewallJsonObject::addChain(ChainJsonObject value) {
  m_chain.push_back(value);
  m_chainIsSet = true;
}


bool FirewallJsonObject::chainIsSet() const {
  return m_chainIsSet;
}

void FirewallJsonObject::unsetChain() {
  m_chainIsSet = false;
}


}
}
}
}

